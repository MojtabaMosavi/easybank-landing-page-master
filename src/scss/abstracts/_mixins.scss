@use "./variables";
@use "./functions";
/*-------------------------------*\
    #mixins 
\*-------------------------------*/

// defining flex container with default properties
@mixin flexify($al-con: center, $js-con: space-between, $flex-d: row) {
  display: flex;
  align-items: $al-con;
  justify-content: $js-con;
  flex-direction: $flex-d;
}

// media queries
@mixin respond-to($breakpoint) {
  @media screen and (min-width: map-get($map:variables.$breakpoints,$key:$breakpoint)) {
    @content;
  }
}

// adding underline
@mixin underline(
  $width: 100%,
  $height: 2px,
  $distance: -0.25rem,
  $direction: right,
  $color-g1: var(--Lime-Green),
  $color-g2: var(--Bright-cyan)
) {
  content: "";
  display: block;
  position: absolute;
  left: 0;
  bottom: $distance;
  width: $width;
  height: $height;
  background: $color-g1;
  transform-origin: $direction;
  transition: variables.$t-ease-in-out;
}

/*
* Mixin used for setting fluid properties such as typography and widths
* src = https://codepen.io/MadeByMike/pen/vNrvdZ?editors=0110
* Renamed some variables 
*/
@mixin interpolate(
  $properties,
  $min-screen,
  $max-screen,
  $min-value,
  $max-value
) {
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-screen) {
      @each $property in $properties {
        #{$property}: functions.calc-interpolation(
          $min-screen,
          $min-value,
          $max-screen,
          $max-value
        );
      }
    }

    @media screen and (min-width: $max-screen) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}
